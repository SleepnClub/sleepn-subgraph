// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BedroomNftPurchaseCostSetted extends ethereum.Event {
  get params(): BedroomNftPurchaseCostSetted__Params {
    return new BedroomNftPurchaseCostSetted__Params(this);
  }
}

export class BedroomNftPurchaseCostSetted__Params {
  _event: BedroomNftPurchaseCostSetted;

  constructor(event: BedroomNftPurchaseCostSetted) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BedroomNftPurchased extends ethereum.Event {
  get params(): BedroomNftPurchased__Params {
    return new BedroomNftPurchased__Params(this);
  }
}

export class BedroomNftPurchased__Params {
  _event: BedroomNftPurchased;

  constructor(event: BedroomNftPurchased) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bedroomNftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PackCostSetted extends ethereum.Event {
  get params(): PackCostSetted__Params {
    return new PackCostSetted__Params(this);
  }
}

export class PackCostSetted__Params {
  _event: PackCostSetted;

  constructor(event: PackCostSetted) {
    this._event = event;
  }

  get packId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PackPurchased extends ethereum.Event {
  get params(): PackPurchased__Params {
    return new PackPurchased__Params(this);
  }
}

export class PackPurchased__Params {
  _event: PackPurchased;

  constructor(event: PackPurchased) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get packId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bedroomNftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpgradeNftBuyingDataSetted extends ethereum.Event {
  get params(): UpgradeNftBuyingDataSetted__Params {
    return new UpgradeNftBuyingDataSetted__Params(this);
  }
}

export class UpgradeNftBuyingDataSetted__Params {
  _event: UpgradeNftBuyingDataSetted;

  constructor(event: UpgradeNftBuyingDataSetted) {
    this._event = event;
  }

  get upgradeNftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amountAvailable(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isAvailable(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class UpgradeNftLinkedToBedroomNft extends ethereum.Event {
  get params(): UpgradeNftLinkedToBedroomNft__Params {
    return new UpgradeNftLinkedToBedroomNft__Params(this);
  }
}

export class UpgradeNftLinkedToBedroomNft__Params {
  _event: UpgradeNftLinkedToBedroomNft;

  constructor(event: UpgradeNftLinkedToBedroomNft) {
    this._event = event;
  }

  get bedroomNftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get upgradeNftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get designURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class UpgradeNftPurchased extends ethereum.Event {
  get params(): UpgradeNftPurchased__Params {
    return new UpgradeNftPurchased__Params(this);
  }
}

export class UpgradeNftPurchased__Params {
  _event: UpgradeNftPurchased;

  constructor(event: UpgradeNftPurchased) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get upgradeNftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpgradeNftUnlinkedFromBedroomNft extends ethereum.Event {
  get params(): UpgradeNftUnlinkedFromBedroomNft__Params {
    return new UpgradeNftUnlinkedFromBedroomNft__Params(this);
  }
}

export class UpgradeNftUnlinkedFromBedroomNft__Params {
  _event: UpgradeNftUnlinkedFromBedroomNft;

  constructor(event: UpgradeNftUnlinkedFromBedroomNft) {
    this._event = event;
  }

  get bedroomNftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get upgradeNftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get designURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class WithdrawMoney extends ethereum.Event {
  get params(): WithdrawMoney__Params {
    return new WithdrawMoney__Params(this);
  }
}

export class WithdrawMoney__Params {
  _event: WithdrawMoney;

  constructor(event: WithdrawMoney) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Dex__getPackDataResult {
  value0: string;
  value1: BigInt;
  value2: Array<BigInt>;

  constructor(value0: string, value1: BigInt, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }

  get_designURI(): string {
    return this.value0;
  }

  get_price(): BigInt {
    return this.value1;
  }

  get_upgradeIds(): Array<BigInt> {
    return this.value2;
  }
}

export class Dex__getUpgradeNftBuyingDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  get_price(): BigInt {
    return this.value0;
  }

  get_amountAvailable(): BigInt {
    return this.value1;
  }

  get_isAvailable(): boolean {
    return this.value2;
  }
}

export class Dex extends ethereum.SmartContract {
  static bind(address: Address): Dex {
    return new Dex("Dex", address);
  }

  bedroomNftInstance(): Address {
    let result = super.call(
      "bedroomNftInstance",
      "bedroomNftInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bedroomNftInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bedroomNftInstance",
      "bedroomNftInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bedroomNftPurchaseCost(): BigInt {
    let result = super.call(
      "bedroomNftPurchaseCost",
      "bedroomNftPurchaseCost():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_bedroomNftPurchaseCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bedroomNftPurchaseCost",
      "bedroomNftPurchaseCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPackData(_packId: BigInt): Dex__getPackDataResult {
    let result = super.call(
      "getPackData",
      "getPackData(uint256):(string,uint256,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_packId)]
    );

    return new Dex__getPackDataResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigIntArray()
    );
  }

  try_getPackData(
    _packId: BigInt
  ): ethereum.CallResult<Dex__getPackDataResult> {
    let result = super.tryCall(
      "getPackData",
      "getPackData(uint256):(string,uint256,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_packId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Dex__getPackDataResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigIntArray()
      )
    );
  }

  getUpgradeNftBuyingData(
    _upgradeId: BigInt
  ): Dex__getUpgradeNftBuyingDataResult {
    let result = super.call(
      "getUpgradeNftBuyingData",
      "getUpgradeNftBuyingData(uint256):(uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_upgradeId)]
    );

    return new Dex__getUpgradeNftBuyingDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_getUpgradeNftBuyingData(
    _upgradeId: BigInt
  ): ethereum.CallResult<Dex__getUpgradeNftBuyingDataResult> {
    let result = super.tryCall(
      "getUpgradeNftBuyingData",
      "getUpgradeNftBuyingData(uint256):(uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_upgradeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Dex__getUpgradeNftBuyingDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  healthTokenInstance(): Address {
    let result = super.call(
      "healthTokenInstance",
      "healthTokenInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_healthTokenInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "healthTokenInstance",
      "healthTokenInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentToken(): Address {
    let result = super.call("paymentToken", "paymentToken():(address)", []);

    return result[0].toAddress();
  }

  try_paymentToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymentToken", "paymentToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sleepTokenInstance(): Address {
    let result = super.call(
      "sleepTokenInstance",
      "sleepTokenInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_sleepTokenInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sleepTokenInstance",
      "sleepTokenInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  teamWallet(): Address {
    let result = super.call("teamWallet", "teamWallet():(address)", []);

    return result[0].toAddress();
  }

  try_teamWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("teamWallet", "teamWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trackerInstance(): Address {
    let result = super.call(
      "trackerInstance",
      "trackerInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trackerInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trackerInstance",
      "trackerInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgradeNftInstance(): Address {
    let result = super.call(
      "upgradeNftInstance",
      "upgradeNftInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_upgradeNftInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upgradeNftInstance",
      "upgradeNftInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgraderInstance(): Address {
    let result = super.call(
      "upgraderInstance",
      "upgraderInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_upgraderInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upgraderInstance",
      "upgraderInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BuyBedroomNftCall extends ethereum.Call {
  get inputs(): BuyBedroomNftCall__Inputs {
    return new BuyBedroomNftCall__Inputs(this);
  }

  get outputs(): BuyBedroomNftCall__Outputs {
    return new BuyBedroomNftCall__Outputs(this);
  }
}

export class BuyBedroomNftCall__Inputs {
  _call: BuyBedroomNftCall;

  constructor(call: BuyBedroomNftCall) {
    this._call = call;
  }
}

export class BuyBedroomNftCall__Outputs {
  _call: BuyBedroomNftCall;

  constructor(call: BuyBedroomNftCall) {
    this._call = call;
  }
}

export class BuyPackCall extends ethereum.Call {
  get inputs(): BuyPackCall__Inputs {
    return new BuyPackCall__Inputs(this);
  }

  get outputs(): BuyPackCall__Outputs {
    return new BuyPackCall__Outputs(this);
  }
}

export class BuyPackCall__Inputs {
  _call: BuyPackCall;

  constructor(call: BuyPackCall) {
    this._call = call;
  }

  get _packId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyPackCall__Outputs {
  _call: BuyPackCall;

  constructor(call: BuyPackCall) {
    this._call = call;
  }
}

export class BuyUpgradeNftCall extends ethereum.Call {
  get inputs(): BuyUpgradeNftCall__Inputs {
    return new BuyUpgradeNftCall__Inputs(this);
  }

  get outputs(): BuyUpgradeNftCall__Outputs {
    return new BuyUpgradeNftCall__Outputs(this);
  }
}

export class BuyUpgradeNftCall__Inputs {
  _call: BuyUpgradeNftCall;

  constructor(call: BuyUpgradeNftCall) {
    this._call = call;
  }

  get _upgradeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyUpgradeNftCall__Outputs {
  _call: BuyUpgradeNftCall;

  constructor(call: BuyUpgradeNftCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _teamWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LinkUpgradeNftCall extends ethereum.Call {
  get inputs(): LinkUpgradeNftCall__Inputs {
    return new LinkUpgradeNftCall__Inputs(this);
  }

  get outputs(): LinkUpgradeNftCall__Outputs {
    return new LinkUpgradeNftCall__Outputs(this);
  }
}

export class LinkUpgradeNftCall__Inputs {
  _call: LinkUpgradeNftCall;

  constructor(call: LinkUpgradeNftCall) {
    this._call = call;
  }

  get _upgradeNftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bedroomNftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newDesignURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class LinkUpgradeNftCall__Outputs {
  _call: LinkUpgradeNftCall;

  constructor(call: LinkUpgradeNftCall) {
    this._call = call;
  }
}

export class LinkUpgradeNftBatchCall extends ethereum.Call {
  get inputs(): LinkUpgradeNftBatchCall__Inputs {
    return new LinkUpgradeNftBatchCall__Inputs(this);
  }

  get outputs(): LinkUpgradeNftBatchCall__Outputs {
    return new LinkUpgradeNftBatchCall__Outputs(this);
  }
}

export class LinkUpgradeNftBatchCall__Inputs {
  _call: LinkUpgradeNftBatchCall;

  constructor(call: LinkUpgradeNftBatchCall) {
    this._call = call;
  }

  get _upgradeNftIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _bedroomNftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newDesignURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class LinkUpgradeNftBatchCall__Outputs {
  _call: LinkUpgradeNftBatchCall;

  constructor(call: LinkUpgradeNftBatchCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _sleepToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _healthToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _bedroomNft(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _upgradeNft(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _tracker(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _upgrader(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _teamWallet(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _devWallet(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetBuyingPriceCall extends ethereum.Call {
  get inputs(): SetBuyingPriceCall__Inputs {
    return new SetBuyingPriceCall__Inputs(this);
  }

  get outputs(): SetBuyingPriceCall__Outputs {
    return new SetBuyingPriceCall__Outputs(this);
  }
}

export class SetBuyingPriceCall__Inputs {
  _call: SetBuyingPriceCall;

  constructor(call: SetBuyingPriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBuyingPriceCall__Outputs {
  _call: SetBuyingPriceCall;

  constructor(call: SetBuyingPriceCall) {
    this._call = call;
  }
}

export class SetPackPriceCall extends ethereum.Call {
  get inputs(): SetPackPriceCall__Inputs {
    return new SetPackPriceCall__Inputs(this);
  }

  get outputs(): SetPackPriceCall__Outputs {
    return new SetPackPriceCall__Outputs(this);
  }
}

export class SetPackPriceCall__Inputs {
  _call: SetPackPriceCall;

  constructor(call: SetPackPriceCall) {
    this._call = call;
  }

  get _upgradeIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _designURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _packId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetPackPriceCall__Outputs {
  _call: SetPackPriceCall;

  constructor(call: SetPackPriceCall) {
    this._call = call;
  }
}

export class SetUpgradeBuyingDataCall extends ethereum.Call {
  get inputs(): SetUpgradeBuyingDataCall__Inputs {
    return new SetUpgradeBuyingDataCall__Inputs(this);
  }

  get outputs(): SetUpgradeBuyingDataCall__Outputs {
    return new SetUpgradeBuyingDataCall__Outputs(this);
  }
}

export class SetUpgradeBuyingDataCall__Inputs {
  _call: SetUpgradeBuyingDataCall;

  constructor(call: SetUpgradeBuyingDataCall) {
    this._call = call;
  }

  get _upgradeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amountAvailable(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _isAvailable(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetUpgradeBuyingDataCall__Outputs {
  _call: SetUpgradeBuyingDataCall;

  constructor(call: SetUpgradeBuyingDataCall) {
    this._call = call;
  }
}

export class SetUpgradePriceBatchCall extends ethereum.Call {
  get inputs(): SetUpgradePriceBatchCall__Inputs {
    return new SetUpgradePriceBatchCall__Inputs(this);
  }

  get outputs(): SetUpgradePriceBatchCall__Outputs {
    return new SetUpgradePriceBatchCall__Outputs(this);
  }
}

export class SetUpgradePriceBatchCall__Inputs {
  _call: SetUpgradePriceBatchCall;

  constructor(call: SetUpgradePriceBatchCall) {
    this._call = call;
  }

  get _upgradeIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _prices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amountsAvailable(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _isAvailable(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }
}

export class SetUpgradePriceBatchCall__Outputs {
  _call: SetUpgradePriceBatchCall;

  constructor(call: SetUpgradePriceBatchCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlinkUpgradeNftCall extends ethereum.Call {
  get inputs(): UnlinkUpgradeNftCall__Inputs {
    return new UnlinkUpgradeNftCall__Inputs(this);
  }

  get outputs(): UnlinkUpgradeNftCall__Outputs {
    return new UnlinkUpgradeNftCall__Outputs(this);
  }
}

export class UnlinkUpgradeNftCall__Inputs {
  _call: UnlinkUpgradeNftCall;

  constructor(call: UnlinkUpgradeNftCall) {
    this._call = call;
  }

  get _upgradeNftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bedroomNftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newDesignURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UnlinkUpgradeNftCall__Outputs {
  _call: UnlinkUpgradeNftCall;

  constructor(call: UnlinkUpgradeNftCall) {
    this._call = call;
  }
}

export class WithdrawMoneyCall extends ethereum.Call {
  get inputs(): WithdrawMoneyCall__Inputs {
    return new WithdrawMoneyCall__Inputs(this);
  }

  get outputs(): WithdrawMoneyCall__Outputs {
    return new WithdrawMoneyCall__Outputs(this);
  }
}

export class WithdrawMoneyCall__Inputs {
  _call: WithdrawMoneyCall;

  constructor(call: WithdrawMoneyCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawMoneyCall__Outputs {
  _call: WithdrawMoneyCall;

  constructor(call: WithdrawMoneyCall) {
    this._call = call;
  }
}
