// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class UpgradeNftLinked extends ethereum.Event {
  get params(): UpgradeNftLinked__Params {
    return new UpgradeNftLinked__Params(this);
  }
}

export class UpgradeNftLinked__Params {
  _event: UpgradeNftLinked;

  constructor(event: UpgradeNftLinked) {
    this._event = event;
  }

  get bedroomNftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get upgradeNftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpgradeNftUnlinked extends ethereum.Event {
  get params(): UpgradeNftUnlinked__Params {
    return new UpgradeNftUnlinked__Params(this);
  }
}

export class UpgradeNftUnlinked__Params {
  _event: UpgradeNftUnlinked;

  constructor(event: UpgradeNftUnlinked) {
    this._event = event;
  }

  get bedroomNftId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get upgradeNftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Upgrader extends ethereum.SmartContract {
  static bind(address: Address): Upgrader {
    return new Upgrader("Upgrader", address);
  }

  bedroomNftContract(): Address {
    let result = super.call(
      "bedroomNftContract",
      "bedroomNftContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bedroomNftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bedroomNftContract",
      "bedroomNftContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dexAddress(): Address {
    let result = super.call("dexAddress", "dexAddress():(address)", []);

    return result[0].toAddress();
  }

  try_dexAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("dexAddress", "dexAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trackerInstance(): Address {
    let result = super.call(
      "trackerInstance",
      "trackerInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trackerInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trackerInstance",
      "trackerInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgradeNftContract(): Address {
    let result = super.call(
      "upgradeNftContract",
      "upgradeNftContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_upgradeNftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upgradeNftContract",
      "upgradeNftContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _bedroomNftContractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _dexAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LinkUpgradeNftCall extends ethereum.Call {
  get inputs(): LinkUpgradeNftCall__Inputs {
    return new LinkUpgradeNftCall__Inputs(this);
  }

  get outputs(): LinkUpgradeNftCall__Outputs {
    return new LinkUpgradeNftCall__Outputs(this);
  }
}

export class LinkUpgradeNftCall__Inputs {
  _call: LinkUpgradeNftCall;

  constructor(call: LinkUpgradeNftCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bedroomNftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _upgradeNftId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _designURI(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class LinkUpgradeNftCall__Outputs {
  _call: LinkUpgradeNftCall;

  constructor(call: LinkUpgradeNftCall) {
    this._call = call;
  }
}

export class UnlinkUpgradeNftCall extends ethereum.Call {
  get inputs(): UnlinkUpgradeNftCall__Inputs {
    return new UnlinkUpgradeNftCall__Inputs(this);
  }

  get outputs(): UnlinkUpgradeNftCall__Outputs {
    return new UnlinkUpgradeNftCall__Outputs(this);
  }
}

export class UnlinkUpgradeNftCall__Inputs {
  _call: UnlinkUpgradeNftCall;

  constructor(call: UnlinkUpgradeNftCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bedroomNftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _upgradeNftId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _designURI(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class UnlinkUpgradeNftCall__Outputs {
  _call: UnlinkUpgradeNftCall;

  constructor(call: UnlinkUpgradeNftCall) {
    this._call = call;
  }
}
