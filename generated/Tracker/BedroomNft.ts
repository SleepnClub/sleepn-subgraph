// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURIChanged extends ethereum.Event {
  get params(): BaseURIChanged__Params {
    return new BaseURIChanged__Params(this);
  }
}

export class BaseURIChanged__Params {
  _event: BaseURIChanged;

  constructor(event: BaseURIChanged) {
    this._event = event;
  }

  get baseURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class BedroomNftMinted extends ethereum.Event {
  get params(): BedroomNftMinted__Params {
    return new BedroomNftMinted__Params(this);
  }
}

export class BedroomNftMinted__Params {
  _event: BedroomNftMinted;

  constructor(event: BedroomNftMinted) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ambiance(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get quality(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get luck(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get comfortability(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class BedroomNftUpdated extends ethereum.Event {
  get params(): BedroomNftUpdated__Params {
    return new BedroomNftUpdated__Params(this);
  }
}

export class BedroomNftUpdated__Params {
  _event: BedroomNftUpdated;

  constructor(event: BedroomNftUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChainlinkDataUpdated extends ethereum.Event {
  get params(): ChainlinkDataUpdated__Params {
    return new ChainlinkDataUpdated__Params(this);
  }
}

export class ChainlinkDataUpdated__Params {
  _event: ChainlinkDataUpdated;

  constructor(event: ChainlinkDataUpdated) {
    this._event = event;
  }

  get callbackGasLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subscriptionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get keyHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get requestConfirmations(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestedRandomness extends ethereum.Event {
  get params(): RequestedRandomness__Params {
    return new RequestedRandomness__Params(this);
  }
}

export class RequestedRandomness__Params {
  _event: RequestedRandomness;

  constructor(event: RequestedRandomness) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get invoker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReturnedRandomness extends ethereum.Event {
  get params(): ReturnedRandomness__Params {
    return new ReturnedRandomness__Params(this);
  }
}

export class ReturnedRandomness__Params {
  _event: ReturnedRandomness;

  constructor(event: ReturnedRandomness) {
    this._event = event;
  }

  get randomWords(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawMoney extends ethereum.Event {
  get params(): WithdrawMoney__Params {
    return new WithdrawMoney__Params(this);
  }
}

export class WithdrawMoney__Params {
  _event: WithdrawMoney;

  constructor(event: WithdrawMoney) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BedroomNft__getDataResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: Address;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: Address,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  get_ambiance(): i32 {
    return this.value0;
  }

  get_quality(): i32 {
    return this.value1;
  }

  get_luck(): i32 {
    return this.value2;
  }

  get_comfortability(): i32 {
    return this.value3;
  }

  get_owner(): Address {
    return this.value4;
  }

  get_level(): BigInt {
    return this.value5;
  }

  get_value(): BigInt {
    return this.value6;
  }
}

export class BedroomNft__getDataBatchResult {
  value0: Array<i32>;
  value1: Array<i32>;
  value2: Array<i32>;
  value3: Array<i32>;
  value4: Array<Address>;
  value5: Array<BigInt>;
  value6: Array<BigInt>;

  constructor(
    value0: Array<i32>,
    value1: Array<i32>,
    value2: Array<i32>,
    value3: Array<i32>,
    value4: Array<Address>,
    value5: Array<BigInt>,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32Array(this.value0));
    map.set("value1", ethereum.Value.fromI32Array(this.value1));
    map.set("value2", ethereum.Value.fromI32Array(this.value2));
    map.set("value3", ethereum.Value.fromI32Array(this.value3));
    map.set("value4", ethereum.Value.fromAddressArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  get_ambiance(): Array<i32> {
    return this.value0;
  }

  get_quality(): Array<i32> {
    return this.value1;
  }

  get_luck(): Array<i32> {
    return this.value2;
  }

  get_comfortability(): Array<i32> {
    return this.value3;
  }

  get_owners(): Array<Address> {
    return this.value4;
  }

  get_levels(): Array<BigInt> {
    return this.value5;
  }

  get_values(): Array<BigInt> {
    return this.value6;
  }
}

export class BedroomNft__getSpecificationsResultNftSpecificationsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get scores(): BigInt {
    return this[1].toBigInt();
  }

  get level(): BigInt {
    return this[2].toBigInt();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }
}

export class BedroomNft__getSpecificationsBatchResultNftSpecificationsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get scores(): BigInt {
    return this[1].toBigInt();
  }

  get level(): BigInt {
    return this[2].toBigInt();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }
}

export class BedroomNft extends ethereum.SmartContract {
  static bind(address: Address): BedroomNft {
    return new BedroomNft("BedroomNft", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  dexAddress(): Address {
    let result = super.call("dexAddress", "dexAddress():(address)", []);

    return result[0].toAddress();
  }

  try_dexAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("dexAddress", "dexAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getData(_tokenId: BigInt): BedroomNft__getDataResult {
    let result = super.call(
      "getData",
      "getData(uint256):(uint16,uint16,uint16,uint16,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new BedroomNft__getDataResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getData(
    _tokenId: BigInt
  ): ethereum.CallResult<BedroomNft__getDataResult> {
    let result = super.tryCall(
      "getData",
      "getData(uint256):(uint16,uint16,uint16,uint16,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BedroomNft__getDataResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getDataBatch(_tokenIds: Array<BigInt>): BedroomNft__getDataBatchResult {
    let result = super.call(
      "getDataBatch",
      "getDataBatch(uint256[]):(uint16[],uint16[],uint16[],uint16[],address[],uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_tokenIds)]
    );

    return new BedroomNft__getDataBatchResult(
      result[0].toI32Array(),
      result[1].toI32Array(),
      result[2].toI32Array(),
      result[3].toI32Array(),
      result[4].toAddressArray(),
      result[5].toBigIntArray(),
      result[6].toBigIntArray()
    );
  }

  try_getDataBatch(
    _tokenIds: Array<BigInt>
  ): ethereum.CallResult<BedroomNft__getDataBatchResult> {
    let result = super.tryCall(
      "getDataBatch",
      "getDataBatch(uint256[]):(uint16[],uint16[],uint16[],uint16[],address[],uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_tokenIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BedroomNft__getDataBatchResult(
        value[0].toI32Array(),
        value[1].toI32Array(),
        value[2].toI32Array(),
        value[3].toI32Array(),
        value[4].toAddressArray(),
        value[5].toBigIntArray(),
        value[6].toBigIntArray()
      )
    );
  }

  getNftsNumber(): BigInt {
    let result = super.call("getNftsNumber", "getNftsNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNftsNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNftsNumber",
      "getNftsNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSpecifications(
    _tokenId: BigInt
  ): BedroomNft__getSpecificationsResultNftSpecificationsStruct {
    let result = super.call(
      "getSpecifications",
      "getSpecifications(uint256):((address,uint64,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return changetype<
      BedroomNft__getSpecificationsResultNftSpecificationsStruct
    >(result[0].toTuple());
  }

  try_getSpecifications(
    _tokenId: BigInt
  ): ethereum.CallResult<
    BedroomNft__getSpecificationsResultNftSpecificationsStruct
  > {
    let result = super.tryCall(
      "getSpecifications",
      "getSpecifications(uint256):((address,uint64,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BedroomNft__getSpecificationsResultNftSpecificationsStruct>(
        value[0].toTuple()
      )
    );
  }

  getSpecificationsBatch(
    _tokenIds: Array<BigInt>
  ): Array<BedroomNft__getSpecificationsBatchResultNftSpecificationsStruct> {
    let result = super.call(
      "getSpecificationsBatch",
      "getSpecificationsBatch(uint256[]):((address,uint64,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(_tokenIds)]
    );

    return result[0].toTupleArray<
      BedroomNft__getSpecificationsBatchResultNftSpecificationsStruct
    >();
  }

  try_getSpecificationsBatch(
    _tokenIds: Array<BigInt>
  ): ethereum.CallResult<
    Array<BedroomNft__getSpecificationsBatchResultNftSpecificationsStruct>
  > {
    let result = super.tryCall(
      "getSpecificationsBatch",
      "getSpecificationsBatch(uint256[]):((address,uint64,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(_tokenIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        BedroomNft__getSpecificationsBatchResultNftSpecificationsStruct
      >()
    );
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintBedroomNft(_owner: Address): BigInt {
    let result = super.call(
      "mintBedroomNft",
      "mintBedroomNft(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigInt();
  }

  try_mintBedroomNft(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintBedroomNft",
      "mintBedroomNft(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintBedroomNfts(_owners: Array<Address>): Array<BigInt> {
    let result = super.call(
      "mintBedroomNfts",
      "mintBedroomNfts(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(_owners)]
    );

    return result[0].toBigIntArray();
  }

  try_mintBedroomNfts(
    _owners: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "mintBedroomNfts",
      "mintBedroomNfts(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(_owners)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestIdToTokenId(param0: BigInt): BigInt {
    let result = super.call(
      "requestIdToTokenId",
      "requestIdToTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_requestIdToTokenId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestIdToTokenId",
      "requestIdToTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  trackerInstance(): Address {
    let result = super.call(
      "trackerInstance",
      "trackerInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trackerInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trackerInstance",
      "trackerInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgradeNftInstance(): Address {
    let result = super.call(
      "upgradeNftInstance",
      "upgradeNftInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_upgradeNftInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upgradeNftInstance",
      "upgradeNftInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgraderInstance(): Address {
    let result = super.call(
      "upgraderInstance",
      "upgraderInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_upgraderInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "upgraderInstance",
      "upgraderInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uri(_tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _vrfCoordinator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _dexAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _devWallet(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _keyHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MintBedroomNftCall extends ethereum.Call {
  get inputs(): MintBedroomNftCall__Inputs {
    return new MintBedroomNftCall__Inputs(this);
  }

  get outputs(): MintBedroomNftCall__Outputs {
    return new MintBedroomNftCall__Outputs(this);
  }
}

export class MintBedroomNftCall__Inputs {
  _call: MintBedroomNftCall;

  constructor(call: MintBedroomNftCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintBedroomNftCall__Outputs {
  _call: MintBedroomNftCall;

  constructor(call: MintBedroomNftCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintBedroomNftsCall extends ethereum.Call {
  get inputs(): MintBedroomNftsCall__Inputs {
    return new MintBedroomNftsCall__Inputs(this);
  }

  get outputs(): MintBedroomNftsCall__Outputs {
    return new MintBedroomNftsCall__Outputs(this);
  }
}

export class MintBedroomNftsCall__Inputs {
  _call: MintBedroomNftsCall;

  constructor(call: MintBedroomNftsCall) {
    this._call = call;
  }

  get _owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class MintBedroomNftsCall__Outputs {
  _call: MintBedroomNftsCall;

  constructor(call: MintBedroomNftsCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetInitialDesignURICall extends ethereum.Call {
  get inputs(): SetInitialDesignURICall__Inputs {
    return new SetInitialDesignURICall__Inputs(this);
  }

  get outputs(): SetInitialDesignURICall__Outputs {
    return new SetInitialDesignURICall__Outputs(this);
  }
}

export class SetInitialDesignURICall__Inputs {
  _call: SetInitialDesignURICall;

  constructor(call: SetInitialDesignURICall) {
    this._call = call;
  }

  get _initialURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetInitialDesignURICall__Outputs {
  _call: SetInitialDesignURICall;

  constructor(call: SetInitialDesignURICall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBedroomNftCall extends ethereum.Call {
  get inputs(): UpdateBedroomNftCall__Inputs {
    return new UpdateBedroomNftCall__Inputs(this);
  }

  get outputs(): UpdateBedroomNftCall__Outputs {
    return new UpdateBedroomNftCall__Outputs(this);
  }
}

export class UpdateBedroomNftCall__Inputs {
  _call: UpdateBedroomNftCall;

  constructor(call: UpdateBedroomNftCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newLevel(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _newScores(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _newDesignURI(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class UpdateBedroomNftCall__Outputs {
  _call: UpdateBedroomNftCall;

  constructor(call: UpdateBedroomNftCall) {
    this._call = call;
  }
}

export class UpdateChainlinkCall extends ethereum.Call {
  get inputs(): UpdateChainlinkCall__Inputs {
    return new UpdateChainlinkCall__Inputs(this);
  }

  get outputs(): UpdateChainlinkCall__Outputs {
    return new UpdateChainlinkCall__Outputs(this);
  }
}

export class UpdateChainlinkCall__Inputs {
  _call: UpdateChainlinkCall;

  constructor(call: UpdateChainlinkCall) {
    this._call = call;
  }

  get _callbackGasLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _keyHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _requestConfirmations(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class UpdateChainlinkCall__Outputs {
  _call: UpdateChainlinkCall;

  constructor(call: UpdateChainlinkCall) {
    this._call = call;
  }
}

export class WithdrawMoneyCall extends ethereum.Call {
  get inputs(): WithdrawMoneyCall__Inputs {
    return new WithdrawMoneyCall__Inputs(this);
  }

  get outputs(): WithdrawMoneyCall__Outputs {
    return new WithdrawMoneyCall__Outputs(this);
  }
}

export class WithdrawMoneyCall__Inputs {
  _call: WithdrawMoneyCall;

  constructor(call: WithdrawMoneyCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawMoneyCall__Outputs {
  _call: WithdrawMoneyCall;

  constructor(call: WithdrawMoneyCall) {
    this._call = call;
  }
}
